meta:
  repo: harbor.chinook.k8s.voidpointergroup.com/freediving-family
  tag: "{{ meta.tag }}"

system:
  ips: "eyJhdXRocyI6eyJoYXJib3IuY2hpbm9vay5rOHMudm9pZHBvaW50ZXJncm91cC5jb20iOnsidXNlcm5hbWUiOiJyb2JvdC1mcmVlZGl2aW5nLWZhbWlseSthcmdvY2QiLCJwYXNzd29yZCI6IktWWjdKSHpQeFE0aDZHbVp2cG1IYWU0bFFkUTUyRE83In19fQ=="
  config:
    yaml: |-
      database:
        mongodb:
          url: "mongodb://freediving-family-mongodb-headless:27017"
      bus:
        nats:
          url: "http://freediving-family-nats:4222"

apps:
  service:
    apofed:
      graphql:
        enabled: true
        deployment:
          ips:
            - name: ips
          revisions: 0
          env:
            - name: APP_PORT
              value: "8080"
            - name: APP_SERVICES
              value: "http://account-graphql:8080,http://certification-graphql:8080,http://event-graphql:8080"
            - name: APP_SYSCONF
              valueFrom:
                secretKeyRef:
                  name: "system-config"
                  key: "yaml"
                  optional: false
        hpa:
          min: 2
          max: 4
          cpu: 50
    account:
      graphql:
        enabled: true
        deployment:
          ips:
            - name: ips
          revisions: 0
          env:
            - name: APP_SYSCONF
              valueFrom:
                secretKeyRef:
                  name: "system-config"
                  key: "yaml"
                  optional: false
        hpa:
          min: 2
          max: 4
          cpu: 50
      login:
        enabled: true
        deployment:
          ips:
            - name: ips
          revisions: 0
          env:
            - name: APP_SYSCONF
              valueFrom:
                secretKeyRef:
                  name: "system-config"
                  key: "yaml"
                  optional: false
        hpa:
          min: 2
          max: 4
          cpu: 50
      worker:
        enabled: true
        deployment:
          ips:
            - name: ips
          revisions: 0
          env:
            - name: APP_LOG_LEVEL
              value: "INFO"
            - name: APP_SYSCONF
              valueFrom:
                secretKeyRef:
                  name: "system-config"
                  key: "yaml"
                  optional: false
        hpa:
          min: 2
          max: 4
          cpu: 50
    certification:
      graphql:
        enabled: true
        deployment:
          ips:
            - name: ips
          revisions: 0
          env:
            - name: APP_SYSCONF
              valueFrom:
                secretKeyRef:
                  name: "system-config"
                  key: "yaml"
                  optional: false
        hpa:
          min: 2
          max: 4
          cpu: 50
    event:
      graphql:
        enabled: true
        deployment:
          ips:
            - name: ips
          revisions: 0
          env:
            - name: APP_SYSCONF
              valueFrom:
                secretKeyRef:
                  name: "system-config"
                  key: "yaml"
                  optional: false
        hpa:
          min: 2
          max: 4
          cpu: 50

nats:
  enabled: true
  nats:
    jetstream:
      enabled: true
      memStorage:
        enabled: true
        size: 1Gi
      fileStorage:
        enabled: true
        storageDirectory: /data
        size: 8Gi
        # storageClassName: ""
        accessModes:
          - ReadWriteOnce
  cluster:
    enabled: true
    replicas: 3

mongodb:
  enabled: true
  auth:
    enabled: false
    rootUser: root
    rootPassword: ""
  architecture: replicaset
  replicaCount: 2
  arbiter:
    enabled: false
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 16Gi

keycloak:
  global:
    imageRegistry: ""
    ## E.g.
    ## imagePullSecrets:
    ##   - myRegistryKeySecretName
    ##
    imagePullSecrets: []
    storageClass: ""

  image:
    registry: docker.io
    repository: bitnami/keycloak
    tag: 20.0.5-debian-11-r1
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  auth:
    adminUser: admin
    adminPassword: "665297b7-464a-49c4-8678-2470b7eb3e6f"

  production: true
  proxy: edge
  httpRelativePath: "/"
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  replicaCount: 2
  containerPorts:
    http: 8080
    https: 8443
    infinispan: 7800
  extraContainerPorts: []
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
  resources:
    limits: {}
    requests: {}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}

  service:
    type: ClusterIP
    http:
      enabled: true
    ports:
      http: 80
      https: 443

  ingress:
    ## @param ingress.enabled Enable ingress record generation for Keycloak
    ##
    enabled: false

  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
    annotations: {}
    extraLabels: {}
  rbac:
    create: false
    rules: []

  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 2
    targetCPU: ""
    targetMemory: ""

  postgresql:
    enabled: true
    auth:
      postgresPassword: "2500ffb1-2321-4ffa-aecd-8cfc6e4ef631"
      username: bn_keycloak
      password: "fc17cd66-41f1-446f-9af0-f8244272cd6a"
      database: bitnami_keycloak
      existingSecret: ""
    architecture: standalone

  logging:
    output: default
    level: INFO
