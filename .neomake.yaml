version: 0.3

env:
  REG_BASE: harbor.chinook.k8s.voidpointergroup.com
  REG_PROJ: freediving-family
  REG_USER: robot-freediving-family+ci
  REG_PASS: qSxgkZpMfKJ1oBRHDeBEk6eunTjiP4En

.services: &services
  - env:
      APP: apofed
      FLAVOR: graphql
      CMD_CODEGEN: ""
  - env:
      APP: account
      FLAVOR: login
      CMD_CODEGEN: "npm run codegen"
  - env:
      APP: account
      FLAVOR: graphql
      CMD_CODEGEN: "npm run codegen"
  - env:
      APP: account
      FLAVOR: worker
      CMD_CODEGEN: "npm run codegen"
  - env:
      APP: certification
      FLAVOR: graphql
      CMD_CODEGEN: "npm run codegen"
  - env:
      APP: event
      FLAVOR: graphql
      CMD_CODEGEN: "npm run codegen"

chains:
  cmd:
    matrix:
      - *services
    tasks:
      - script: |
          cd code/backend/apps/$APP
          {{ cmd }}

  install:
    matrix:
      - *services
    tasks:
      - script: |
          cd code/backend/apps/$APP
          npm i

  codegen:
    pre:
      - install
    matrix:
      - *services
    tasks:
      - script: |
          cd code/backend/apps/$APP
          $CMD_CODEGEN

  prepare:
    pre:
      - codegen
    workdir: code/backend
    tasks:
      - script: |
          cd libs/bus/ts
          npm i
          npm run codegen
      - script: |
          cd libs/shared
          npm i

  image:
    tasks:
      - script: |
          printf $REG_PASS | docker login -u $REG_USER --password-stdin $REG_BASE

          cd code/backend/apps/{{ app }}
          export IMAGE_NAME=$REG_BASE/$REG_PROJ/{{ app }}-{{ flavor }}:{{ version }}
          docker build -f docker/Dockerfile --build-arg=app={{ app }} --build-arg=flavor={{ flavor }} -t $IMAGE_NAME ../../
          docker push $IMAGE_NAME

  images:
    matrix:
      - *services
    tasks:
      - script: |
          printf $REG_PASS | docker login -u $REG_USER --password-stdin $REG_BASE

          cd code/backend/apps/$APP
          export IMAGE_NAME=$REG_BASE/$REG_PROJ/$APP-$FLAVOR:{{ version }}
          docker build --platform=linux/amd64 -f docker/Dockerfile --build-arg=app=$APP --build-arg=flavor=$FLAVOR -t $IMAGE_NAME ../../
          # docker push $IMAGE_NAME

  helm:
    workdir: ./deploy/helm
    tasks:
      - script: |
          complate -e render -t chart -v chart={{ chart }} -v version={{ version }} > ./Chart.yaml
          complate -e render -t values -v meta.tag={{ version }} > ./values.yaml
          helm dependency build
          helm package .
          mv ./{{ chart }}-{{ version }}.tgz ./chart.tgz
          curl -lLk -X POST -H 'Content-Type: multipart/form-data' -F 'chart=@./chart.tgz;type=application/x-compressed-tar' -H 'accept: application/json' -u $REG_USER:$REG_PASS https://$REG_BASE/api/chartrepo/$REG_PROJ/charts

  deploy:
    pre:
      - images
      - helm
    tasks: []
