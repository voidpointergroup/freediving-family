extend type User @key(fields: "id") {
  id: String! @external

  certs: [Cert!]!
  cert_attempts: [CertAttempt!]!

  to_approve: [Requirement!]!
}

extend type Group @key(fields: "id") {
  id: String! @external
}

type RequirementTemplate {
  name: String!
}

type Requirement @key(fields: "id") {
  id: String!

  name: String!

  observed_by: User
  observed_at: String

  approved_by: User
  approved_at: String
}

type CertTemplate @key(fields: "id") {
  id: String!

  name: String!
  requirements: [RequirementTemplate!]!
}

type CertAttempt @key(fields: "id") {
  id: String!
  student: User!
  observer: User!
  approver: User!

  started_at: String!
  ends_at: String!

  name: String!
  requirements: [Requirement!]!
}

type Cert @key(fields: "id") {
  id: String!

  name: String!

  awarded_by: User!
  awarded_at: String!
}

extend type Query {
  cert(id: String!): Cert!
  cert_attempt(id: String!): CertAttempt!
  cert_template(id: String!): CertTemplate!
  requirement(id: String!): Requirement!
}

input CertAttemptCreateInput {
  student_id: String!
  observer_id: String!
  approver_id: String!
  cert_template_id: String!
}

type CertAttemptMutation {
  create(input: CertAttemptCreateInput!): CertAttempt!

  award(id: String!): Cert!
}

input CertTemplateCreateInput {
  name: String!
  requirements: [String!]!
}

type CertTemplateMutation {
  create(input: CertTemplateCreateInput!): CertTemplate!
  delete(id: String!): Boolean!
}

input UpdateRequirementInput {
  observed: Boolean
  approved: Boolean
}

type RequirementMutation {
  update(id: String!, input: UpdateRequirementInput!): Requirement!
}

extend type Mutation {
  cert_attempt: CertAttemptMutation!
  cert_template: CertTemplateMutation!
  requirement: RequirementMutation!
}

schema {
  query: Query
  mutation: Mutation
}
