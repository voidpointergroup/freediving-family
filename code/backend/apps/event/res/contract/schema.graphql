extend type User @key(fields: "id") {
  id: String! @external

  attendeeships: [EventAttendeeship!]!
}

extend type Group @key(fields: "id") {
  id: String! @external
}

type EventAttendeeship @key(fields: "id") {
  id: String!

  attendee: User!
  perm_group: Group!
  event_group: EventGroup!
}

type EventGroup @key(fields: "id") {
  id: String!
  name: String!

  attendeeships: [EventAttendeeship!]!
}

type Event @key(fields: "id") {
  id: String!

  name: String!
  starts_at: String!
  ends_at: String!
  archived: Boolean!

  event_groups: [EventGroup!]!
  perm_groups: [Group!]!
}

input QueryEventsParams {
  archived: Boolean
}

extend type Query {
  event(id: String!): Event!
  events(params: QueryEventsParams!): [Event!]!
}

input EventCreateInput {
  name: String!
  starts_at: String!
  ends_at: String!
}

input EventGroupCreateInput {
  name: String!
}

input EventGroupAddAttendeeInput {
  user_id: String!
  perm_group_id: String!
}

type EventGroupMutation {
  create(event_id: String!, input: EventGroupCreateInput!): EventGroup!
  add_attendee(
    event_group_id: String!
    input: EventGroupAddAttendeeInput!
  ): EventAttendeeship!
  remove_attendee(id: String!): Boolean!
}

input UpdateEventInput {
  name: String
  starts_at: String
  ends_at: String
  archived: Boolean
}

type EventMutation {
  create(input: EventCreateInput!): Event!
  update(id: String!, in: UpdateEventInput!): Event!

  group: EventGroupMutation!
}

extend type Mutation {
  event: EventMutation!
}

schema {
  query: Query
  mutation: Mutation
}
