extend type User @key(fields: "id") {
  id: String! @external
}

extend type Group @key(fields: "id") {
  id: String! @external
}

type EventAttendee {
  attendee: User!
  role: Group!
}

type EventGroup @key(fields: "id") {
  id: String!
  name: String!

  members: [EventAttendee!]!
}

type Event @key(fields: "id") {
  id: String!

  name: String!
  starts_at: String!
  ends_at: String!
  archived: Boolean!

  groups: [EventGroup!]!
  perm_groups: [Group!]!
}

input QueryEventsParams {
  archived: Boolean
}

extend type Query {
  event(id: String!): Event!
  events(params: QueryEventsParams!): [Event!]!
}

input EventCreateInput {
  name: String!
  starts_at: String!
  ends_at: String!
}

input EventGroupCreateInput {
  name: String!
}

input AddAttendeeToEventGroupInput {
  user_id: String!
  role_id: String! # = permission group ID
}

type EventGroupMutation {
  create(event_id: String!, input: EventGroupCreateInput!): EventGroup!

  add_attendee(
    group_id: String!
    input: AddAttendeeToEventGroupInput!
  ): EventAttendee!
  remove_attendee(group_id: String!, user_id: String!): Boolean!
}

type EventMutation {
  create(input: EventCreateInput!): Event!
  set_archived(id: String!): Boolean!

  group: EventGroupMutation!
}

extend type Mutation {
  event: EventMutation!
}

schema {
  query: Query
  mutation: Mutation
}
