type UserCollection {
  edges: [UserEdge!]!
}
type UserEdge {
  cursor: String!
  node: User!
}
type User @key(fields: "id") {
  id: String!
  name: String!

  groups: GroupCollection!
}

type GroupPermission {
  actionRegex: String!
  resourceRegex: String!
}
type GroupCollection {
  edges: [GroupEdge!]!
}
type GroupEdge {
  cursor: String!
  node: Group!
}
type Group @key(fields: "id") {
  id: String!
  name: String!
  permissions: [GroupPermission!]!
  extends: GroupCollection!
}

extend type Query {
  myself: User!

  user(id: String!): User!
  group(id: String!): Group!
}

input UpdateUserInput {
  avatar: String
  groups: [String!]
}

input GroupPermissionInput {
  actionRegex: String!
  resourceRegex: String!
}
input UpdateGroupInput {
  extends: [String!]!
  permissions: [GroupPermissionInput!]!
}

type UserMutation {
  id: String!

  update(input: UpdateUserInput!): User!
}

type GroupMutation {
  id: String!

  update(input: UpdateGroupInput!): Group!
}

extend type Mutation {
  user(id: String!): UserMutation!
  group(id: String!): GroupMutation!
}

schema {
  query: Query
  mutation: Mutation
}
